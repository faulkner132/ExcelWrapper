<?xml version="1.0" encoding="utf-8"?>
<topic id="68e67e81-cc6b-451e-aa9c-951c1d7d9a13" revisionNumber="1">
  <developerSampleDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Below is a very basic usage example to demonstrate how the object is used.</para>
    </introduction>

    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Example">
      <title>Example in VB.NET</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
          <code language="vb.net">
              <![CDATA[' Create invisible Excel.Application object.
Using xl As New ExcelWrapper.Excel

    ' Add a workbook.
    ' This workbook will not have any sheets.
    Dim xlWorkbook As ExcelWrapper.Workbook = xl.AddWorkbook

    ' Add some sheets to the workbook.
    Dim xlWorksheet1 As ExcelWrapper.Worksheet = xlWorkbook.AddWorksheet("My Sheet")
    Dim xlWorksheet2 As ExcelWrapper.Worksheet =
        xlWorkbook.AddWorksheet("Another Sheet", after:=xlWorksheet1)
    Dim xlWorksheet3 As ExcelWrapper.Worksheet =
        xlWorkbook.AddWorksheet("Before Others", before:=xlWorksheet1)

    ' Show the Excel object.
    xl.Visible = True

    With xlWorksheet1
        ' Bring the sheet to the front.
        .SetActive()

        ' Set values.
        .SetValue(1, 1, 5) ' Row 1, Column 1, Value = 5
        .SetValue(1, "B", 10) ' Row 1, Column B, Value = 10

        ' Manually enter formula instead of using the formula builder.
        .SetFormula("C1", "=RC[-2]+RC[-1]") ' Cell C1, Formula = A1+B1


        Dim xlRange As ExcelWrapper.Range = .GetRange("A3:C5")

        ' Set Cells A3 - C5 to the Excel formula to generate a random number.
        xlRange.Formula = "=RAND()"

        ' Place a border around the top and right sides.
        xlRange.SetBorder(style:=ExcelWrapper.Constants.BorderStyle.Single,
                            weight:=ExcelWrapper.Constants.BorderWeight.Normal,
                            color:=RGB(0, 0, 0), modifyTop:=True, modifyRight:=True)

        ' Set the background color to blue.
        xlRange.SetProperties(backColor:=RGB(0, 0, 255))


        ' Build an Excel formula reference (R1C1 format) for A3 - C5
        ' with respect to the destination Cell, D5.
        Dim formulaString As String =
            String.Format("=AVERAGE({0}:{1})",
                            ExcelWrapper.Util.GetFormulaReference(5, "D", 3, "A"),
                            ExcelWrapper.Util.GetFormulaReference(5, 4, 5, 3))

        ' Row 4, Column 4 (Cell D5), Formula =AVERAGE(R[-2]C[-3]:RC[-1])
        .SetFormula(5, 4, formulaString)

        ' Write the generated formula to D6.
        .SetValue("D6", "'" & formulaString)


        ' Set the first row to bold, italics, and red.
        .GetRange("1:1").SetFont(bold:=True, italic:=True, color:=RGB(255, 0, 0))

        ' Set Column D to be 3x the width.
        ' Can use either D or 4 to reference the column.
        .SetColumnWidth("D", .GetColumnWidth(4) * 3)

        ' Center the text of column D.
        .GetRange("D:D").SetProperties(
            horizontalAlign:=ExcelWrapper.Constants.HorizontalAlignment.Center)

    End With

    ' Hide Excel.
    xl.Visible = False

    ' Save.
    xlWorkbook.Save("Test File.xlsx")

    ' End Using will release all Excel resources and display the hidden application.
End Using]]>
          </code>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>
